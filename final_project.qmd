---
title: "Final Project: Group 33"
author: "Dale Jin, Katherine Tu, Yuliana Zhang"
date: "Dec 2"

format: 
    pdf: 
        include-in-header: 
            text: | 
                \usepackage{fvextra} \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}} 
        
        include-before-body: 
            text: |
                \RecustomVerbatimEnvironment{verbatim}{Verbatim}{ showspaces = false, showtabs = false, breaksymbolleft={}, breaklines}
---


```{python}
import pandas as pd
import altair as alt
alt.renderers.enable("png")
import time
import warnings 
warnings.filterwarnings('ignore')
import os

import geopandas as gpd
from shapely.geometry import Point
from shapely import wkt
import matplotlib.pyplot as plt
import numpy as np
```



1. Data Cleaning

```{python}
# Loading the Data
df_building = pd.read_csv("data/Chicago_Energy_Benchmarking_-_Covered_Buildings_20240715.csv")
df_energy = pd.read_csv("data/Chicago_Energy_Benchmarking_20240715.csv")

chicago_communities = pd.read_csv('data/CommAreas_20241130.csv')
chicago_communities['the_geom'] = chicago_communities['the_geom'].apply(wkt.loads)
```

```{python}
# Merge by building id
df_merge = pd.merge(df_energy, df_building, how = 'inner', left_on = 'ID', right_on = 'Building ID')

# Filter for necessary variables
df = df_merge[[
    'Data Year', 
    'Community Area', 
    'Primary Property Type', 
    'Gross Floor Area - Buildings (sq ft)', 
    'Year Built',
    'Electricity Use (kBtu)',
    'Natural Gas Use (kBtu)',
    'Total GHG Emissions (Metric Tons CO2e)',
    'Latitude_x',
    'Longitude_x'
]]

# Rename
df = df.rename(columns={
    'Data Year': 'year',
    'Community Area': 'community',
    'Primary Property Type': 'property_type',
    'Gross Floor Area - Buildings (sq ft)': 'area',
    'Year Built': 'built_year',
    'Electricity Use (kBtu)': 'electricity',
    'Natural Gas Use (kBtu)': 'gas',
    'Total GHG Emissions (Metric Tons CO2e)': 'ghg',
    'Latitude_x': 'latitude',
    'Longitude_x': 'longitude'
})

# Treated (prior retrofitted) communities
treat = [
    "Rogers Park","Belmont Cragin","Hermosa","Humboldt Park", "Austin","North Lawndale","South Lawndale","Grand Boulevard","Washington Park","Woodlawn","South Shore","Chatham","South Chicago","Roseland","East Side","McKinley Park","Gage Park","West Englewood","Englewood","Auburn Gresham"]
treat = [community.upper() for community in treat]

# Merge treated communities to main df
df['treated'] = df['community'].isin(treat).astype(int)
```

2. Build Geopanda Graphs by Year

```{python}
## 1. GHG plot
fig, axes = plt.subplots(1, 2, figsize=(20, 8), sharex=True, sharey=True)  # Create 1x2 grid with shared axes

# Data for 2017
df_2017 = df[df['year'] == 2017]
geoplot_2017 = df_2017.groupby('community')[['ghg', 'treated']].mean().reset_index()
geoplot_2017 = geoplot_2017.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2017 = gpd.GeoDataFrame(geoplot_2017, geometry='the_geom')

# Plot for 2017
geoplot_2017.plot(
    column="ghg",
    cmap="Greens",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[0]
)
axes[0].set_title("2017", fontsize=14, fontweight='bold')
axes[0].set_axis_off()

# Data for 2022
df_2022 = df[df['year'] == 2022]
geoplot_2022 = df_2022.groupby('community')[['ghg', 'treated']].mean().reset_index()
geoplot_2022 = geoplot_2022.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2022 = gpd.GeoDataFrame(geoplot_2022, geometry='the_geom')

# Plot for 2022
geoplot_2022.plot(
    column="ghg",
    cmap="Greens",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[1]
)
axes[1].set_title("2022", fontsize=14, fontweight='bold')
axes[1].set_axis_off()

# Add title
fig.suptitle("Greenhouse Gas Emissions by Community (2017 vs 2022)", 
             fontsize=18, fontweight='bold')

# Add legend
legend = plt.cm.ScalarMappable(cmap="Greens", norm=plt.Normalize(vmin=min(geoplot_2017['ghg'].min(), geoplot_2022['ghg'].min()), vmax=max(geoplot_2017['ghg'].max(), geoplot_2022['ghg'].max())))

# Adjust legend position
cbar = fig.colorbar(legend, ax=axes).set_label("Average Greenhouse Gas Emissions (Metric Tons CO2)", fontsize=12)

```

```{python}
## 2. Electricity plot
fig, axes = plt.subplots(1, 2, figsize=(20, 8), sharex=True, sharey=True)  # Create 1x2 grid with shared axes

# Data for 2017
df_2017 = df[df['year'] == 2017]
geoplot_2017 = df_2017.groupby('community')[['electricity', 'treated']].mean().reset_index()
geoplot_2017 = geoplot_2017.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2017 = gpd.GeoDataFrame(geoplot_2017, geometry='the_geom')

# Plot for 2017
geoplot_2017.plot(
    column="electricity",
    cmap="Blues",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[0]
)
axes[0].set_title("2017", fontsize=14, fontweight='bold')
axes[0].set_axis_off()

# Data for 2022
df_2022 = df[df['year'] == 2022]
geoplot_2022 = df_2022.groupby('community')[['electricity', 'treated']].mean().reset_index()
geoplot_2022 = geoplot_2022.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2022 = gpd.GeoDataFrame(geoplot_2022, geometry='the_geom')

# Plot for 2022
geoplot_2022.plot(
    column="electricity",
    cmap="Blues",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[1]
)
axes[1].set_title("2022", fontsize=14, fontweight='bold')
axes[1].set_axis_off()

# Add title
fig.suptitle("Electricity Usage by Community (2017 vs 2022)", 
             fontsize=18, fontweight='bold')

# Add legend
legend = plt.cm.ScalarMappable(cmap="Blues", norm=plt.Normalize(vmin=min(geoplot_2017['electricity'].min(), geoplot_2022['electricity'].min()), vmax=max(geoplot_2017['electricity'].max(), geoplot_2022['electricity'].max())))

# Adjust legend position
cbar = fig.colorbar(legend, ax=axes).set_label("Average Electricity Usage", fontsize=12)

```

```{python}
## 3. Gas plot
fig, axes = plt.subplots(1, 2, figsize=(20, 8), sharex=True, sharey=True)  # Create 1x2 grid with shared axes

# Data for 2017
df_2017 = df[df['year'] == 2017]
geoplot_2017 = df_2017.groupby('community')[['gas', 'treated']].mean().reset_index()
geoplot_2017 = geoplot_2017.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2017 = gpd.GeoDataFrame(geoplot_2017, geometry='the_geom')

# Plot for 2017
geoplot_2017.plot(
    column="gas",
    cmap="Reds",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[0]
)
axes[0].set_title("2017", fontsize=14, fontweight='bold')
axes[0].set_axis_off()

# Data for 2022
df_2022 = df[df['year'] == 2022]
geoplot_2022 = df_2022.groupby('community')[['gas', 'treated']].mean().reset_index()
geoplot_2022 = geoplot_2022.merge(chicago_communities, left_on='community', right_on='COMMUNITY', how='left')
geoplot_2022 = gpd.GeoDataFrame(geoplot_2022, geometry='the_geom')

# Plot for 2022
geoplot_2022.plot(
    column="gas",
    cmap="Reds",
    legend=False,
    edgecolor="black",
    linewidth=0.5,
    ax=axes[1]
)
axes[1].set_title("2022", fontsize=14, fontweight='bold')
axes[1].set_axis_off()

# Add title
fig.suptitle("Gas Usage by Community (2017 vs 2022)", 
             fontsize=18, fontweight='bold')

# Add legend
legend = plt.cm.ScalarMappable(cmap="Reds", norm=plt.Normalize(vmin=min(geoplot_2017['gas'].min(), geoplot_2022['gas'].min()), vmax=max(geoplot_2017['gas'].max(), geoplot_2022['gas'].max())))

# Adjust legend position
cbar = fig.colorbar(legend, ax=axes).set_label("Average Gas Usage", fontsize=12)

```

3. Shiny dynamic plots 1

```{python}
df_nontreatment = df[df['treated']==0]

ave_usage = df_nontreatment.groupby(["year","property_type"], as_index = False)[["electricity","gas","ghg"]].mean()
```

```{python}
print(ave_usage["property_type"].unique())
```

```{python}
ave_usage_residential = ave_usage[ave_usage["property_type"]== "Multifamily Housing"]

alt.Chart(ave_usage_residential).mark_line().encode(
    alt.X("year:O"),
    alt.Y("ghg:Q"),
).transform_filter(alt.datum.year >= 2017).properties(width = 500, height = 300)
```

```{python}
alt.Chart(ave_usage).mark_line(point = True).encode(
    alt.X("year:O"),
    alt.Y("ghg:Q"),
    alt.Color("property_type:N"),
    alt.Tooltip("property_type:N")
).transform_filter(alt.datum.year >= 2017)
```
4. Shiny dynamic plots 2