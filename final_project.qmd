---
title: "Final Project: Group 33"
author: "Dale Jin, Katherine Tu, Yuliana Zhang"
date: "Dec 2"

format: 
    pdf: 
        include-in-header: 
            text: | 
                \usepackage{fvextra} \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}} 
        
        include-before-body: 
            text: |
                \RecustomVerbatimEnvironment{verbatim}{Verbatim}{ showspaces = false, showtabs = false, breaksymbolleft={}, breaklines}
---


```{python}
import pandas as pd
import altair as alt
alt.renderers.enable("png")
import time
import warnings 
warnings.filterwarnings('ignore')
import os

import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
```



1. Data Cleaning

```{python}
# Loading the Data
df_building = pd.read_csv("data/Chicago_Energy_Benchmarking_-_Covered_Buildings_20240715.csv")
df_energy = pd.read_csv("data/Chicago_Energy_Benchmarking_20240715.csv")
```

```{python}
# Merge by building id
df_merge = pd.merge(df_energy, df_building, how = 'inner', left_on = 'ID', right_on = 'Building ID')

# Filter for necessary variables
df = df_merge[[
    'Data Year', 
    'Community Area', 
    'Primary Property Type', 
    'Gross Floor Area - Buildings (sq ft)', 
    'Year Built',
    'Electricity Use (kBtu)',
    'Natural Gas Use (kBtu)',
    'Total GHG Emissions (Metric Tons CO2e)',
    'Latitude_x',
    'Longitude_x'
]]

# Rename
df = df.rename(columns={
    'Data Year': 'year',
    'Community Area': 'community',
    'Primary Property Type': 'property_type',
    'Gross Floor Area - Buildings (sq ft)': 'area',
    'Year Built': 'built_year',
    'Electricity Use (kBtu)': 'electricity',
    'Natural Gas Use (kBtu)': 'gas',
    'Total GHG Emissions (Metric Tons CO2e)': 'ghg',
    'Latitude_x': 'latitude',
    'Longitude_x': 'longitude'
})

# Treated (prior retrofitted) communities
treat = [
    "Rogers Park","Belmont Cragin","Hermosa","Humboldt Park", "Austin","North Lawndale","South Lawndale","Grand Boulevard","Washington Park","Woodlawn","South Shore","Chatham","South Chicago","Roseland","East Side","McKinley Park","Gage Park","West Englewood","Englewood","Auburn Gresham"]
treat = [community.upper() for community in treat]

# Merge treated communities to main df
df['treated'] = df['community'].isin(treat).astype(int)
```

2. Build Geopanda Graphs by Year

```{python}
# Create geometry points using longitude and latitude
geometry = [Point(xy) for xy in zip(df['longitude'], df['latitude'])]

# Create a GeoDataFrame
gdf = gpd.GeoDataFrame(df, geometry=geometry)

# Set a CRS (Coordinate Reference System)
gdf.set_crs(epsg=4326, inplace=True)  # WGS84 CRS

# Plot the GeoDataFrame
gdf.plot(column='ghg', cmap='coolwarm', legend=True, figsize=(10, 6))
```

3. Shiny dynamic plots 1

```{python}
df_nontreatment = df[df['treated']==0]

ave_usage = df_nontreatment.groupby(["year","property_type"], as_index = False)[["electricity","gas","ghg"]].mean()
```

```{python}
print(ave_usage["property_type"].unique())
```

```{python}
ave_usage_residential = ave_usage[ave_usage["property_type"]== "Multifamily Housing"]

alt.Chart(ave_usage_residential).mark_line().encode(
    alt.X("year:O"),
    alt.Y("ghg:Q"),
).transform_filter(alt.datum.year >= 2017).properties(width = 500, height = 300)
```

```{python}
alt.Chart(ave_usage).mark_line(point = True).encode(
    alt.X("year:O"),
    alt.Y("ghg:Q"),
    alt.Color("property_type:N"),
    alt.Tooltip("property_type:N")
).transform_filter(alt.datum.year >= 2017)
```
4. Shiny dynamic plots 2